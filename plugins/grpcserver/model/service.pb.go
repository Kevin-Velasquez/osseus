// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package server

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// A plugin resource
type Plugin struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CdnLink              string   `protobuf:"bytes,2,opt,name=cdn_link,json=cdnLink,proto3" json:"cdn_link,omitempty"`
	Status               string   `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Plugin) Reset()         { *m = Plugin{} }
func (m *Plugin) String() string { return proto.CompactTextString(m) }
func (*Plugin) ProtoMessage()    {}
func (*Plugin) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0}
}

func (m *Plugin) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Plugin.Unmarshal(m, b)
}
func (m *Plugin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Plugin.Marshal(b, m, deterministic)
}
func (m *Plugin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Plugin.Merge(m, src)
}
func (m *Plugin) XXX_Size() int {
	return xxx_messageInfo_Plugin.Size(m)
}
func (m *Plugin) XXX_DiscardUnknown() {
	xxx_messageInfo_Plugin.DiscardUnknown(m)
}

var xxx_messageInfo_Plugin proto.InternalMessageInfo

func (m *Plugin) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Plugin) GetCdnLink() string {
	if m != nil {
		return m.CdnLink
	}
	return ""
}

func (m *Plugin) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

// Request message for CreatePlugin method
type CreatePluginRequest struct {
	Plugin               *Plugin  `protobuf:"bytes,1,opt,name=plugin,proto3" json:"plugin,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreatePluginRequest) Reset()         { *m = CreatePluginRequest{} }
func (m *CreatePluginRequest) String() string { return proto.CompactTextString(m) }
func (*CreatePluginRequest) ProtoMessage()    {}
func (*CreatePluginRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{1}
}

func (m *CreatePluginRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreatePluginRequest.Unmarshal(m, b)
}
func (m *CreatePluginRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreatePluginRequest.Marshal(b, m, deterministic)
}
func (m *CreatePluginRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatePluginRequest.Merge(m, src)
}
func (m *CreatePluginRequest) XXX_Size() int {
	return xxx_messageInfo_CreatePluginRequest.Size(m)
}
func (m *CreatePluginRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatePluginRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreatePluginRequest proto.InternalMessageInfo

func (m *CreatePluginRequest) GetPlugin() *Plugin {
	if m != nil {
		return m.Plugin
	}
	return nil
}

// Request message for GetPlugin method
type GetPluginRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPluginRequest) Reset()         { *m = GetPluginRequest{} }
func (m *GetPluginRequest) String() string { return proto.CompactTextString(m) }
func (*GetPluginRequest) ProtoMessage()    {}
func (*GetPluginRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{2}
}

func (m *GetPluginRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPluginRequest.Unmarshal(m, b)
}
func (m *GetPluginRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPluginRequest.Marshal(b, m, deterministic)
}
func (m *GetPluginRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPluginRequest.Merge(m, src)
}
func (m *GetPluginRequest) XXX_Size() int {
	return xxx_messageInfo_GetPluginRequest.Size(m)
}
func (m *GetPluginRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPluginRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPluginRequest proto.InternalMessageInfo

func (m *GetPluginRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// Response message for ListPlugins method
type ListPluginsResponse struct {
	Plugin               []*Plugin `protobuf:"bytes,1,rep,name=plugin,proto3" json:"plugin,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ListPluginsResponse) Reset()         { *m = ListPluginsResponse{} }
func (m *ListPluginsResponse) String() string { return proto.CompactTextString(m) }
func (*ListPluginsResponse) ProtoMessage()    {}
func (*ListPluginsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{3}
}

func (m *ListPluginsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListPluginsResponse.Unmarshal(m, b)
}
func (m *ListPluginsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListPluginsResponse.Marshal(b, m, deterministic)
}
func (m *ListPluginsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPluginsResponse.Merge(m, src)
}
func (m *ListPluginsResponse) XXX_Size() int {
	return xxx_messageInfo_ListPluginsResponse.Size(m)
}
func (m *ListPluginsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPluginsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListPluginsResponse proto.InternalMessageInfo

func (m *ListPluginsResponse) GetPlugin() []*Plugin {
	if m != nil {
		return m.Plugin
	}
	return nil
}

// Request message for DeletePlugin method
type DeletePluginRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeletePluginRequest) Reset()         { *m = DeletePluginRequest{} }
func (m *DeletePluginRequest) String() string { return proto.CompactTextString(m) }
func (*DeletePluginRequest) ProtoMessage()    {}
func (*DeletePluginRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{4}
}

func (m *DeletePluginRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeletePluginRequest.Unmarshal(m, b)
}
func (m *DeletePluginRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeletePluginRequest.Marshal(b, m, deterministic)
}
func (m *DeletePluginRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeletePluginRequest.Merge(m, src)
}
func (m *DeletePluginRequest) XXX_Size() int {
	return xxx_messageInfo_DeletePluginRequest.Size(m)
}
func (m *DeletePluginRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeletePluginRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeletePluginRequest proto.InternalMessageInfo

func (m *DeletePluginRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*Plugin)(nil), "server.Plugin")
	proto.RegisterType((*CreatePluginRequest)(nil), "server.CreatePluginRequest")
	proto.RegisterType((*GetPluginRequest)(nil), "server.GetPluginRequest")
	proto.RegisterType((*ListPluginsResponse)(nil), "server.ListPluginsResponse")
	proto.RegisterType((*DeletePluginRequest)(nil), "server.DeletePluginRequest")
}

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 367 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xcf, 0x4a, 0xc3, 0x40,
	0x10, 0xc6, 0x69, 0x0a, 0xd1, 0x4e, 0xff, 0x50, 0xa6, 0x5a, 0x62, 0xda, 0x83, 0x2c, 0x28, 0xe2,
	0x21, 0xc1, 0x7a, 0x13, 0x3c, 0xa9, 0x78, 0xb0, 0xa0, 0xd4, 0x83, 0xde, 0x24, 0x6d, 0xc6, 0xb2,
	0x34, 0x6e, 0x62, 0x76, 0x53, 0x10, 0xe9, 0xc5, 0x57, 0xf0, 0xd1, 0x7c, 0x05, 0xef, 0xbe, 0x82,
	0x74, 0x93, 0xd6, 0x34, 0x56, 0x6f, 0xd9, 0x99, 0xd9, 0xdf, 0xf7, 0xcd, 0x97, 0x85, 0xba, 0xa4,
	0x78, 0xca, 0x47, 0xe4, 0x44, 0x71, 0xa8, 0x42, 0x34, 0xe7, 0x47, 0x8a, 0xed, 0xce, 0x38, 0x0c,
	0xc7, 0x01, 0xb9, 0xba, 0x3a, 0x4c, 0x1e, 0x5d, 0x7a, 0x8a, 0xd4, 0x4b, 0x3a, 0x64, 0x77, 0xb3,
	0xa6, 0x17, 0x71, 0xd7, 0x13, 0x22, 0x54, 0x9e, 0xe2, 0xa1, 0x90, 0x69, 0x97, 0x5d, 0x81, 0x79,
	0x13, 0x24, 0x63, 0x2e, 0xb0, 0x01, 0x06, 0xf7, 0xad, 0xd2, 0x6e, 0xe9, 0xa0, 0x32, 0x30, 0xb8,
	0x8f, 0x3b, 0xb0, 0x39, 0xf2, 0xc5, 0x43, 0xc0, 0xc5, 0xc4, 0x32, 0x74, 0x75, 0x63, 0xe4, 0x8b,
	0x3e, 0x17, 0x13, 0x6c, 0x83, 0x29, 0x95, 0xa7, 0x12, 0x69, 0x95, 0x75, 0x23, 0x3b, 0xb1, 0x53,
	0x68, 0x9d, 0xc5, 0xe4, 0x29, 0x4a, 0x91, 0x03, 0x7a, 0x4e, 0x48, 0x2a, 0xdc, 0x07, 0x33, 0xd2,
	0x05, 0x4d, 0xaf, 0xf6, 0x1a, 0x4e, 0xea, 0xdb, 0xc9, 0xc6, 0xb2, 0x2e, 0x63, 0xd0, 0xbc, 0x24,
	0xb5, 0x7a, 0xb7, 0xe0, 0x6a, 0x2e, 0xd1, 0xe7, 0x32, 0x1b, 0x92, 0x03, 0x92, 0x51, 0x28, 0x24,
	0xad, 0x48, 0x94, 0xff, 0x91, 0xd8, 0x83, 0xd6, 0x39, 0x05, 0x54, 0x74, 0x58, 0x50, 0xe9, 0x7d,
	0x19, 0x60, 0xde, 0x6a, 0x00, 0xde, 0x43, 0x2d, 0xbf, 0x13, 0x76, 0x16, 0xe4, 0x35, 0x9b, 0xda,
	0x05, 0x59, 0xd6, 0x79, 0xfb, 0xf8, 0x7c, 0x37, 0xb6, 0x59, 0xd5, 0x9d, 0x1e, 0xb9, 0xa9, 0x05,
	0x79, 0x92, 0x79, 0xc1, 0x6b, 0xa8, 0x2c, 0xd7, 0x45, 0x6b, 0x71, 0xb3, 0x98, 0xc0, 0x2f, 0xa6,
	0xa5, 0x99, 0x88, 0xcd, 0x1c, 0xd3, 0x7d, 0xe5, 0xfe, 0x0c, 0xef, 0xa0, 0x9a, 0xcb, 0x06, 0xdb,
	0x4e, 0xfa, 0xe7, 0x9d, 0xc5, 0xb3, 0x70, 0x2e, 0xe6, 0xcf, 0xc2, 0x5e, 0x6e, 0xb0, 0x26, 0x48,
	0xd6, 0xd2, 0xf4, 0x3a, 0xe6, 0x1d, 0xa3, 0x07, 0xb5, 0x7c, 0x6a, 0x3f, 0x19, 0xac, 0xc9, 0xd2,
	0xfe, 0x43, 0x96, 0x75, 0x35, 0xb9, 0x7d, 0xb8, 0xb5, 0xe2, 0x3b, 0xfd, 0x98, 0x0d, 0x4d, 0x3d,
	0x7d, 0xfc, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x45, 0xc3, 0x84, 0xbe, 0xe2, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ServerClient is the client API for Server service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServerClient interface {
	// Creates a new plugin
	CreatePlugin(ctx context.Context, in *CreatePluginRequest, opts ...grpc.CallOption) (*Plugin, error)
	// Get plugin with specific id
	GetPlugin(ctx context.Context, in *GetPluginRequest, opts ...grpc.CallOption) (*Plugin, error)
	// List all stored plugins
	ListPlugins(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListPluginsResponse, error)
	// Delete stored plugin
	DeletePlugin(ctx context.Context, in *DeletePluginRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type serverClient struct {
	cc *grpc.ClientConn
}

func NewServerClient(cc *grpc.ClientConn) ServerClient {
	return &serverClient{cc}
}

func (c *serverClient) CreatePlugin(ctx context.Context, in *CreatePluginRequest, opts ...grpc.CallOption) (*Plugin, error) {
	out := new(Plugin)
	err := c.cc.Invoke(ctx, "/server.Server/CreatePlugin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) GetPlugin(ctx context.Context, in *GetPluginRequest, opts ...grpc.CallOption) (*Plugin, error) {
	out := new(Plugin)
	err := c.cc.Invoke(ctx, "/server.Server/GetPlugin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) ListPlugins(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListPluginsResponse, error) {
	out := new(ListPluginsResponse)
	err := c.cc.Invoke(ctx, "/server.Server/ListPlugins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) DeletePlugin(ctx context.Context, in *DeletePluginRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/server.Server/DeletePlugin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerServer is the server API for Server service.
type ServerServer interface {
	// Creates a new plugin
	CreatePlugin(context.Context, *CreatePluginRequest) (*Plugin, error)
	// Get plugin with specific id
	GetPlugin(context.Context, *GetPluginRequest) (*Plugin, error)
	// List all stored plugins
	ListPlugins(context.Context, *empty.Empty) (*ListPluginsResponse, error)
	// Delete stored plugin
	DeletePlugin(context.Context, *DeletePluginRequest) (*empty.Empty, error)
}

func RegisterServerServer(s *grpc.Server, srv ServerServer) {
	s.RegisterService(&_Server_serviceDesc, srv)
}

func _Server_CreatePlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).CreatePlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Server/CreatePlugin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).CreatePlugin(ctx, req.(*CreatePluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_GetPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).GetPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Server/GetPlugin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).GetPlugin(ctx, req.(*GetPluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_ListPlugins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).ListPlugins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Server/ListPlugins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).ListPlugins(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_DeletePlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).DeletePlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Server/DeletePlugin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).DeletePlugin(ctx, req.(*DeletePluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Server_serviceDesc = grpc.ServiceDesc{
	ServiceName: "server.Server",
	HandlerType: (*ServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePlugin",
			Handler:    _Server_CreatePlugin_Handler,
		},
		{
			MethodName: "GetPlugin",
			Handler:    _Server_GetPlugin_Handler,
		},
		{
			MethodName: "ListPlugins",
			Handler:    _Server_ListPlugins_Handler,
		},
		{
			MethodName: "DeletePlugin",
			Handler:    _Server_DeletePlugin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
